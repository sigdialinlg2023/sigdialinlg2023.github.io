#!/usr/bin/env python3

"""
Takes the TSV file generated by `sigdial_sessions_gdoc_to_tsv.py` and updates the `session` column in `papers.csv`.
"""

import pandas as pd
import re

# Read the TSV file into a DataFrame
df_tsv = pd.read_csv(
    "scripts/sigdial_sessions_exported.tsv",
    sep="\t",
    header=0,
    names=["id", "title", "authors", "session"],
)

# Read the CSV file into a DataFrame
df_csv = pd.read_csv("sitedata/papers.csv")


def find_matching_row(title):
    # Use regular expressions to extract session details
    # ignore any non-word characters
    title = re.sub(r"\W", "", title)
    df_tsv["title"] = df_tsv["title"].apply(lambda x: re.sub(r"\W", "", x))
    matching_row = df_tsv[df_tsv["title"].str.contains(title, case=False)]
    return matching_row


# Function to map full session names to short names
def map_session_name(title):
    matching_row = find_matching_row(title)

    if not matching_row.empty:
        full_session_name = matching_row.iloc[0]["session"]

        if "virtual" in full_session_name.lower():
            return f"virtualpostersession"

        match = re.search(r"Session\s*(\d+)", full_session_name, re.IGNORECASE)

        if match:
            session_number = match.group(1)

            if "poster" in full_session_name.lower():
                return f"sigdialpostersession{session_number}"
            else:
                return f"sigdialoralsession{session_number}"
        else:
            return ""


# def map_day(title):
#     matching_row = find_matching_row(title)

#     if not matching_row.empty:
#         full_session_name = matching_row.iloc[0]["session"]
#         match = re.search(r"September\s*(\d+)", full_session_name, re.IGNORECASE)

#         if match:
#             day_number = match.group(1)
#             day_name = {
#                 "11": "Monday",
#                 "12": "Tuesday",
#                 "13": "Wednesday",
#                 "14": "Thursday",
#                 "15": "Friday",
#             }[day_number]
#             return day_name
#         else:
#             return ""


# Apply the function to update the 'session' column in the CSV DataFrame
df_csv["session"] = df_csv["title"].apply(map_session_name)
# df_csv["day"] = df_csv["title"].apply(map_day)


# Save the updated DataFrame to a new CSV file
df_csv.to_csv("sitedata/papers.csv", index=False)

print("papers.csv has been updated with sessions from the doc.")
