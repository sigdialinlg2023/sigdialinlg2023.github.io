#!/usr/bin/env python3

"""
Takes the TSV file generated by `sigdial_sessions_gdoc_to_tsv.py` and updates the `session` column in `papers.csv`.
"""

import pandas as pd
import re
import sys

conference = sys.argv[1]
# Path to the exported TSV file
exported_tsv_file = f"scripts/{conference}_sessions_exported.tsv"

# Read the TSV file into a DataFrame
df_tsv = pd.read_csv(
    exported_tsv_file,
    sep="\t",
    header=0,
)

# Read the CSV file into a DataFrame
df_csv = pd.read_csv("sitedata/papers.csv")


def find_matching_rows(title):
    # Use regular expressions to extract session details
    # ignore any non-word characters
    title = re.sub(r"\W", "", title)
    df_tsv["paper_title"] = df_tsv["paper_title"].apply(lambda x: re.sub(r"\W", "", x))
    matching_rows = df_tsv[df_tsv["paper_title"].str.contains(title, case=False)]
    return matching_rows


# just for sigdial
def get_session_uid(full_session_name):
    if "virtual" in full_session_name.lower():
        return f"virtualpostersession"

    match = re.search(r"Session\s*(\d+)", full_session_name, re.IGNORECASE)

    if match:
        session_number = match.group(1)

        if "poster" in full_session_name.lower():
            return f"sigdialpostersession{session_number}"
        else:
            return f"sigdialoralsession{session_number}"

    return ""


if __name__ == "__main__":
    # if df_csv does not contain the column "notes", add it
    if not "notes" in df_csv:
        df_csv["notes"] = ""

    # iterate through each paper for the conference `conference`
    for i, row in df_csv.iterrows():
        if row["conference"] != conference:
            continue

        title = row["title"]
        paper_id = row["original_id"]

        if conference == "sigdial":
            matching_paper = find_matching_rows(title).iloc[0]
        elif conference == "inlg":
            matching_paper = df_tsv[df_tsv["paper_id"] == paper_id].iloc[0]

        session = ""

        if not "session_uid" in matching_paper:
            # sigdial
            full_session_name = matching_paper["session"]
            session_shortcode = get_session_uid(full_session_name)
        else:
            # inlg
            session_shortcode = matching_paper["session_uid"]

        df_csv.at[i, "session"] = session_shortcode
        df_csv.at[i, "order"] = matching_paper["order"]
        df_csv.at[i, "notes"] = matching_paper["note"] if "note" in matching_paper else ""


# Save the updated DataFrame to a new CSV file
df_csv.to_csv("sitedata/papers.csv", index=False)

print("papers.csv has been updated with sessions from the doc.")
