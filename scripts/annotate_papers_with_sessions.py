#!/usr/bin/env python3

"""
Takes the TSV file generated by `sigdial_sessions_gdoc_to_tsv.py` and updates the `session` column in `papers.csv`.
"""

import pandas as pd
import re
import sys

# Path to the exported TSV file
exported_tsv_file = sys.argv[1]

# Read the TSV file into a DataFrame
df_tsv = pd.read_csv(
    exported_tsv_file,
    sep="\t",
    header=0,
    # names=["id", "title", "authors", "session", "order"],
)

# Read the CSV file into a DataFrame
df_csv = pd.read_csv("sitedata/papers.csv")


def find_matching_rows(title):
    # Use regular expressions to extract session details
    # ignore any non-word characters
    title = re.sub(r"\W", "", title)
    df_tsv["paper_title"] = df_tsv["paper_title"].apply(lambda x: re.sub(r"\W", "", x))
    matching_rows = df_tsv[df_tsv["paper_title"].str.contains(title, case=False)]
    return matching_rows


# just for sigdial
def get_session_uid(full_session_name):
    if "virtual" in full_session_name.lower():
        return f"virtualpostersession"

    match = re.search(r"Session\s*(\d+)", full_session_name, re.IGNORECASE)

    if match:
        session_number = match.group(1)

        if "poster" in full_session_name.lower():
            return f"sigdialpostersession{session_number}"
        else:
            return f"sigdialoralsession{session_number}"

    return ""


df_csv["order"] = 0

# iterate through each row in the CSV DataFrame
for i, row in df_csv.iterrows():
    title = row["title"]
    matching_rows = find_matching_rows(title)
    session = ""

    if not matching_rows.empty:
        shortcodes = []
        for _, matching_row in matching_rows.iterrows():

            if not "session_uid" in matching_row:
                full_session_name = matching_row["session"]
                session_shortcode = get_session_uid(full_session_name)
            else:
                session_shortcode = matching_row["session_uid"]
            if session_shortcode:
                shortcodes.append(session_shortcode)

        df_csv.at[i, "session"] = "|".join(shortcodes)
        df_csv.at[i, "order"] = "|".join([str(x) for x in matching_rows["order"]])

# # Apply the function to update the 'session' column in the CSV DataFrame
# df_csv["session"] = df_csv["title"].apply(map_session_name)


# Save the updated DataFrame to a new CSV file
df_csv.to_csv("sitedata/papers.csv", index=False)

print("papers.csv has been updated with sessions from the doc.")
